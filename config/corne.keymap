#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/key-labels/36.h" // todo: make local
#include "zmk-helpers/helper.h" // todo: dont use

#define DEF_L 0 
#define SYM_L 1 
#define NAV_L 2 
#define NUM_L 3 

#define QUICK_TAP_MS 175

#define XXX &none
#define ___ &trans

#define _BT_SEL_KEYS_1_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3
#define _BT_SEL_KEYS_2_ &bt BT_CLR_ALL &bt BT_CLR

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// may need this one
// Sticky layer + sticky shift (workaround for issue #1421)
// ZMK_STICKY_KEY(sls,
//     release-after-ms = <1000>;
//     bindings = <&uc_shift>;
//     ignore-modifiers;
// )
// ZMK_MACRO(uc_shift,
//     wait-ms = <0>;
//     tap-ms = <1>;
//     bindings = <&macro_press &mo UC &kp LSHFT>
//              , <&macro_pause_for_release>
//              , <&macro_release &mo UC &kp LSHFT>;
// )

/ {

    chosen { zmk,matrix_transform = &five_column_transform; };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };
    

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ----------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  |
//             | esc | LWR | tab |   | spc | RSE  | bksp |
        bindings = <
   &kp Q       &kp W       &kp E        &kp R        &kp T     &kp Y     &kp U        &kp I        &kp O       &kp P   
   &hml LGUI A &hml LALT S &hml LCTRL D &hml LSHFT F &kp G     &kp H     &hmr RSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI
   &kp Z       &kp X       &kp C        &kp V        &kp B     &kp N     &kp M        &kp COMMA    &kp DOT     &kp FSLH
                           &kp ESC      &mo NAV_L    &kp TAB   &kp SPACE &mo SYM_L    &kp BSPC
                   >;
        };

        sym_layer {

// ---------------------------------------------------------------------------
// | esc | [   | {   | ( | ~   |   | ^    | )   | }    | ]    | `     |
// | -   | *   | =   | _ | $   |   | #    | cmd | alt  | ctrl | shift |
// | +   | "|" | @   | \ | %   |   | none | !   | &    | '    | "     |
//             | esc |   | tab |   | spc  |     | bspc |


            bindings = <
   &kp ESC    &kp LBKT   &kp LBRC   &kp LPAR   &kp TILDE  &kp CARET &kp RPAR    &kp RBRC   &kp RBKT  &kp GRAVE
   &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR   &kp HASH  &sk LSHIFT  &sk RCTRL  &sk RALT  &sk RGUI
   &kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT  XXX       &kp EXCL    &kp AMPS   &kp SQT   &kp DQT  
                         &kp ESC    ___        &kp SPACE  &kp RET   ___         &kp RALT
                       >;
        };

        nav_layer {
    // todo update
// ---------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// | f1  | f2  | f5  | ret |  ~  |   |  -  |  =  |  [  |  ]  |  \  |
// | f9  | f10 | f11 | f12 |  `  |   |  _  |  +  |  {  |  }  | "|" |
//             | esc |     | tab |   | spc |     | bspc |

            bindings = <
    _BT_SEL_KEYS_1_                              &kp K_VOL_UP     &caps_word &kp HOME  &kp END   &kp DEL   &kp BSPC
    &kp ESC    &sk LALT  &sk LCTRL   &sk LSHIFT  &kp K_VOL_DN     &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT &kp RET
    _BT_SEL_KEYS_2_      &kp K_PREV  &kp K_NEXT  &kp K_PLAY_PAUSE ___        &kp PG_DN &kp PG_UP &kp SQT   &kp DQT
                         &kp ESC     ___         &kp TAB          &kp SPACE  ___           &kp BSPC
                       >;
        };

        num_layer {
// -------------------------------------------------------------------------------
// |  1   |   2  |   3   |    4   |  5  |   | 6   | 7      | 8     | 9    | 0    |
// | lgui | lalt | lctrl | lshift | f11 |   | f12 | lshift | rctrl | ralt | rgui |
// | f1   | f2   | f3    | f4     | f5  |   | f6  | f7     | f8    | f9   | f0   |
//               | esc   |        | tab |   | spc |        | bspc |
            bindings = <
   &kp N1   &kp N2   &kp N3    &kp N4     &kp N5         &kp N6    &kp N7     &kp N8    &kp N9   &kp N0 
   &sk LGUI &sk LALT &sk LCTRL &sk LSHIFT &kp F11        &kp F12   &sk LSHIFT &sk RCTRL &sk RALT &sk RGUI
   &kp F1   &kp F2   &kp F3    &kp F4     &kp F5         &kp F6    &kp F7     &kp F8    &kp F9   &kp F10 
                     &kp ESC   ___        &kp TAB        &kp SPACE ___        &kp BSPC
                       >;
        };
    };
};

/* vim: set ft=c tw=174: */
