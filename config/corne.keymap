/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
// #include "mouse.dtsi"

#define DEF_L 0 
#define NAV_L 1 
#define SYS_L 2 
#define NUM_L 3 

#define QUICK_TAP_MS 175

#define XXX &none
#define ___ &trans

#define _BT_SEL_KEYS_1_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3
#define _BT_SEL_KEYS_2_ &bt BT_CLR_ALL &bt BT_CLR

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)


// probably don't need

// #define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
// #define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
// #define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
// #define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
// #define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
// #define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward


// probably also don't need
// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document

// #define MASK_MODS(NAME, MODS, BINDING) \
//     ZMK_MOD_MORPH(NAME, \
//         bindings = <BINDING>, <BINDING>; \
//         mods = <MODS>; \
//     )
// MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
// MASK_MODS(masked_end,  (MOD_LCTL), &kp END)


// not sure if need
// smart-mouse, requires PR #1366

// ZMK_TRI_STATE(smart_mouse,
//     bindings = <&tog MOUSE>, <XXX >, <&tog MOUSE>;
//     ignored-key-positions = <LT1 LT3 RT0 RT1 RT2 RT3 RT4 RM1 RM2 RM3 RB1 RB2 RB3 RH0 RH1>;
//     ignored-layers = <MOUSE>;
// )


// may need this one
// Sticky layer + sticky shift (workaround for issue #1421)
ZMK_STICKY_KEY(sls,
    release-after-ms = <1000>;
    bindings = <&uc_shift>;
    ignore-modifiers;
)
ZMK_MACRO(uc_shift,
    wait-ms = <0>;
    tap-ms = <1>;
    bindings = <&macro_press &mo UC &kp LSHFT>
             , <&macro_pause_for_release>
             , <&macro_release &mo UC &kp LSHFT>;
)


ZMK_CONDITIONAL_LAYER(sys, NAV_L SYM_L, NUM_L)  // FN + NUM --> SYS


/ {

        chosen { zmk,matrix_transform = &five_column_transform; };

        keymap {
                compatible = "zmk,keymap";


    // &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T  &kp G           X_MM     &kp M         &hmr LCTRL N  &hmr RSHFT E  &hmr LALT I   &hmr LGUI O
   // &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI

                default_layer {
// ----------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  |
//             | esc | LWR | tab |   | spc | RSE  | bksp |
                        bindings = <
   &kp Q       &kp W       &kp E        &kp R        &kp T     &kp Y     &kp U        &kp I        &kp O       &kp P   
   &hml LGUI A &hml LALT S &hml LCTRL D &hml LSHFT F &kp G     &kp H     &hmr RSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI
   &kp Z       &kp X       &kp C        &kp V        &kp B     &kp N     &kp M        &kp COMMA    &kp DOT     &kp FSLH
                           &kp ESC      &mo 1        &kp TAB   &kp SPACE &mo 2        &kp BSPC
                        >;
                };
                sym_layer {

// ---------------------------------------------------------------------------
// | esc | [   | {   | ( | ~   |   | ^    | )   | }    | ]    | `     |
// | -   | *   | =   | _ | $   |   | #    | cmd | alt  | ctrl | shift |
// | +   | "|" | @   | \ | %   |   | none | !   | &    | '    | "     |
//             | esc |   | tab |   | spc  |     | bspc |


                        bindings = <
   &kp ESC    &kp LBKT   &kp LBRC   &kp LPAR   &kp TILDE  &kp CARET &kp RPAR    &kp RBRC   &kp RBKT  &kp GRAVE
   &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR   &kp HASH  &sk LSHIFT  &sk RCTRL  &sk RALT  &sk RGUI
   &kp PLUS   &kp PIPE   &kp AT     &kp fslh   &kp PRCNT  XXX      &kp BSLH    &kp AMPS   &kp QMARK &kp EXCL  
                         &kp ESC    ___        &kp SPACE  &kp RET   ___         &kp RALT




                        >;
   // ___          ___          ___          ___          ___            ___      ___      ___    ___       ___   

   // &kp N1       &kp N2       &kp N3       &kp N4         &kp N5         &kp N6       &kp N7       &kp N8      &kp N9        &kp N0
   // &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHIFT     ___            ___          &sk LSHIFT   &sk RCTRL   &sk RALT      &sk RGUI
   // &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR_ALL &bt BT_CLR     &kp LEFT     &kp DOWN     &kp UP      &kp RIGHT     ___   
   //                           &kp ESC      ___            &kp SPACE      &kp RET      ___          &kp RALT
                };

                nav_layer {
// ---------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// | f1  | f2  | f5  | ret |  ~  |   |  -  |  =  |  [  |  ]  |  \  |
// | f9  | f10 | f11 | f12 |  `  |   |  _  |  +  |  {  |  }  | "|" |
//             | esc |     | tab |   | spc |     | bspc |

// // &kp tab
// // &kp swapwin
// // &kp tab left
// // &kp tab right
// &kp vol up
// // &kp reset
// &kp home
// &kp up
// &kp end
// &kp del
// &kp shift
// &kp ctrl
// &kp alt
// &kp cmd
// &kp vol down
// // &kp caps lock
// &kp left
// &kp down
// &kp right
// // &kp bspc
// // &kp space left
// // &kp space right
// // &kp back
// // &kp fwd
// // &kp play
// // &kp blank
// &kp page down
// &kp page up
// // &kp swap lang
// &kp enter

   // &kp EXCL &kp AT  &kp HASH &kp DLLR &kp PRCNT      &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR
   // &kp F1   &kp F2  &kp F5   &kp RET  &kp TILDE      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH
   // &kp F9   &kp F10 &kp F11  &kp F12  &kp GRAVE      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE
   //                  &kp ESC  ___      &kp TAB        &kp SPACE ___       &kp BSPC

                        bindings = <

_BT_SEL_KEYS_1_                          &kp K_VOL_UP     ___       &kp HOME      ___         &kp END   &kp del
&sk LGUI &sk LALT &sk LCTRL   &sk LSHIFT &kp K_VOL_DN     &kp LEFT  &kp DOWN      &kp UP      &kp RIGHT ___   
_BT_SEL_KEYS_2_   &kp C_PREV  &kp C_NEXT &kp C_PLAY_PAUSE ___       &kp PG_DN     &kp PG_UP   ___       &kp RET
                  &kp ESC     ___        &kp TAB          &kp SPACE ___           &kp BSPC



                        >;
                };

                num_layer {
// -------------------------------------------------------------------------------
// |  1   |   2  |   3   |    4   |  5  |   | 6   | 7      | 8     | 9    | 0    |
// | lgui | lalt | lctrl | lshift | f11 |   | f12 | lshift | rctrl | ralt | rgui |
// | f1   | f2   | f3    | f4     | f5  |   | f6  | f7     | f8    | f9   | f0   |
//               | esc   |        | tab |   | spc |        | bspc |
                        bindings = <
   &kp 1    &kp 2    &kp 3     &kp 4      &kp 5          &kp 6     &kp 7      &kp 8     &kp 9    &kp 0   
   &sk LGUI &sk LALT &sk LCTRL &sk LSHIFT &kp f11        &kp f12   &sk LSHIFT &sk RCTRL &sk RALT &sk RGUI
   &sk f1   &sk f2   &sk f3    &sk f4     &sk f5         &sk f6    &sk f7     &sk f8    &sk f9   &sk f10 
                     &kp ESC   ___        &kp TAB        &kp SPACE ___        &kp BSPC
                        >;
                };
        };
};
